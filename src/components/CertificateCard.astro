---
import { Image } from 'astro:assets';

export interface Props {
    title: string;
    image: ImageMetadata; // Assuming ImageMetadata has a .src property for the original path
    validityUrl: string;
}
const { title, image, validityUrl } = Astro.props;

// Generate a unique ID slug from the title for DOM elements
const slug = title.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
const imageTriggerId = `cert-image-trigger-${slug}`;
const modalId = `cert-modal-${slug}`;
const modalImageId = `modal-image-${slug}`;
const closeModalButtonId = `close-modal-button-${slug}`;
---

<div class="bg-white rounded-xl shadow-lg p-5 flex flex-col items-center w-80 certificate-card hover:text-white">
    <div id={imageTriggerId} class="cursor-pointer">
        <Image src={image} alt={title} width={240} class="rounded-md mb-4" />
    </div>
    <div class="font-semibold text-lg text-center mb-2">{title}</div>
    <button onclick={`window.open('${validityUrl}', '_blank')`} class="px-4 py-2 bg-cyan-600 hover:bg-cyan-800 text-white rounded-lg mt-2 transition">Check Validity</button>

    <!-- Modal for displaying the image -->
    <div id={modalId} class="fixed inset-0 bg-black bg-opacity-80 z-[100] hidden" aria-labelledby={`modal-title-${slug}`} role="dialog" aria-modal="true">
        <div class="relative p-4 w-full h-full flex items-center justify-center">
            <img id={modalImageId} src="" alt={`${title} - Enlarged View`} class="max-w-[90vw] max-h-[85vh] object-contain rounded-md" />
            <button id={closeModalButtonId} type="button" class="absolute top-4 right-4 bg-white rounded-full p-1.5 text-gray-700 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500" aria-label="Close modal">
                <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
    </div>
</div>

<style>
    .certificate-card {
        background-color: white;
        background-image: none;
        background-size: 400%;
        background-position: 100%;
        transition: background-position 2.0s cubic-bezier(0.22, 1, 0.36, 1), color 0.3s;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
    }
    
    .certificate-card:is(:hover, :focus-within) {
        background-position: 0;
        background-image: var(--accent-gradient);
    }

    /* Ensure the title text also turns white on hover */
    .certificate-card .font-semibold {
        transition: color 0.3s ease-in-out;
    }
    .certificate-card:is(:hover, :focus-within) .font-semibold {
        color: white;
    }
</style>

<script define:vars={{ imageTriggerId, modalId, modalImageId, closeModalButtonId, imageSrc: image.src }} is:inline>
    function initializeModal() {
        const trigger = document.getElementById(imageTriggerId);
        const modal = document.getElementById(modalId);
        const modalImage = document.getElementById(modalImageId);
        const closeModalButton = document.getElementById(closeModalButtonId);

        if (trigger && modal && modalImage && closeModalButton) {
            trigger.addEventListener('click', () => {
                modalImage.src = imageSrc; // Use the passed image.src
                modal.classList.remove('hidden');
                // Add flex display properties when showing the modal
                modal.classList.add('flex', 'items-center', 'justify-center');
                document.body.style.overflow = 'hidden';
            });

            const closeTheModal = () => {
                modal.classList.add('hidden');
                // Remove flex display properties when hiding the modal
                modal.classList.remove('flex', 'items-center', 'justify-center');
                document.body.style.overflow = '';
            };

            closeModalButton.addEventListener('click', closeTheModal);

            modal.addEventListener('click', (event) => {
                // Check if the click is on the modal backdrop itself (the parent div)
                // not on its children (like the image or the close button's inner div).
                if (event.target === modal) {
                    closeTheModal();
                }
            });

            const handleEscKey = (event) => {
                if (event.key === 'Escape' && !modal.classList.contains('hidden')) {
                    closeTheModal();
                }
            };
            
            document.removeEventListener('keydown', handleEscKey); // Remove existing before adding
            document.addEventListener('keydown', handleEscKey);
        }    }
    
    // Initialize the modal when the script loads
    initializeModal();
</script>
