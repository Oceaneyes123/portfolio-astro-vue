---
import { Image } from 'astro:assets';

export interface Props {
    title: string;
    image: ImageMetadata;
    validityUrl: string;
    tag: 'Project Management' | 'Artificial Intelligence' | 'Cloud Computing' | 'Software Engineering';
}

const { title, image, validityUrl, tag } = Astro.props;

// Define tag colors
const tagColors = {
    'Project Management': 'bg-yellow-100 text-yellow-800',
    'Artificial Intelligence': 'bg-orange-100 text-orange-800',
    'Cloud Computing': 'bg-cyan-100 text-cyan-800',
    'Software Engineering': 'bg-green-100 text-green-800'
};

// Generate a unique ID slug from the title for DOM elements
const slug = title.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
const imageTriggerId = `cert-image-trigger-${slug}`;
const modalId = `cert-modal-${slug}`;
const modalImageId = `modal-image-${slug}`;
const closeModalButtonId = `close-modal-button-${slug}`;
---

<div class="bg-white rounded-xl shadow-lg p-5 flex flex-col items-center w-80 certificate-card hover:text-white">    <div id={imageTriggerId} class="cursor-pointer">
        <Image src={image} alt={title} width={240} class="rounded-md mb-4 transition-transform hover:scale-105" />
    </div>
    <div class="font-semibold text-lg text-center mb-2">{title}</div>
    <div class={`px-3 py-1 rounded-full text-sm font-medium mb-3 ${tagColors[tag]}`}>
        {tag}
    </div>
    <button onclick={`window.open('${validityUrl}', '_blank')`} class="px-4 py-2 bg-cyan-600 hover:bg-cyan-800 text-white rounded-lg mt-2 transition">Check Validity</button>

    <!-- Modal for displaying the certificate -->
    <div id={modalId} class="fixed inset-0 bg-black bg-opacity-80 z-[100] hidden items-center justify-center" role="dialog" aria-modal="true">
        <div class="absolute inset-0 w-full h-full bg-transparent" data-modal-overlay></div>
        <div class="relative p-4 w-full h-full flex items-center justify-center pointer-events-none">
            <div class="bg-white rounded-lg p-8 max-w-4xl w-full max-h-[90vh] overflow-y-auto pointer-events-auto">
                <div class="flex justify-between items-start mb-6">
                    <h2 class="text-3xl font-bold text-gray-900">{title}</h2>
                    <button type="button" id={closeModalButtonId} class="text-gray-400 hover:text-gray-900 bg-gray-100 hover:bg-gray-200 rounded-full p-2 ml-auto inline-flex items-center justify-center transition-colors duration-200" aria-label="Close modal">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                <div class="space-y-6">
                    <div class="flex justify-center">
                        <img id={modalImageId} src="" alt={`${title} - Enlarged View`} class="rounded-lg max-h-[70vh] w-auto object-contain" />
                    </div>
                    <div class="mt-6 flex justify-center">
                        <a href={validityUrl} target="_blank" class="inline-flex items-center px-5 py-2.5 text-sm font-medium text-center text-white bg-cyan-600 rounded-lg hover:bg-cyan-700 focus:ring-4 focus:outline-none focus:ring-cyan-300">
                            Verify Certificate
                            <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                            </svg>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .certificate-card {
        background-color: white;
        background-image: none;
        background-size: 400%;
        background-position: 100%;
        transition: background-position 2.0s cubic-bezier(0.22, 1, 0.36, 1), color 0.3s;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
    }
    
    .certificate-card:is(:hover, :focus-within) {
        background-position: 0;
        background-image: var(--accent-gradient);
    }

    .certificate-card .font-semibold {
        transition: color 0.3s ease-in-out;
    }
    .certificate-card:is(:hover, :focus-within) .font-semibold {
        color: white;
    }
</style>

<script define:vars={{ imageTriggerId, modalId, modalImageId, closeModalButtonId, imageSrc: image.src }} is:inline>
    function initializeModal() {
        const modal = document.getElementById(modalId);
        const trigger = document.getElementById(imageTriggerId);
        const modalImage = document.getElementById(modalImageId);
        const closeButton = document.getElementById(closeModalButtonId);
        const modalOverlay = modal.querySelector('[data-modal-overlay]');
        
        if (trigger && modal && modalImage && closeButton) {
            trigger.addEventListener('click', () => {
                modalImage.src = imageSrc;
                modal.classList.remove('hidden');
                modal.classList.add('flex');
                document.body.style.overflow = 'hidden';
            });
            
            function closeModal() {
                modal.classList.add('hidden');
                modal.classList.remove('flex');
                document.body.style.overflow = '';
            }
            
            closeButton.addEventListener('click', closeModal);
            modalOverlay.addEventListener('click', closeModal);
            
            document.addEventListener('keydown', (event) => {
                if (event.key === 'Escape' && !modal.classList.contains('hidden')) {
                    closeModal();
                }
            });
        }
    }
    
    // Initialize the modal when the script loads
    initializeModal();
</script>
